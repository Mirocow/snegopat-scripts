$engine JScript
$uname ControlsList
$dname Древовидный список элементов формы
$addin global
$addin stdlib

global.connectGlobals(SelfScript)

var мФормаСкрипта = null;

////////////////////////////////////////////////////////////////////////////////////////
////{ Макросы
////

SelfScript.self['macrosОткрыть окно'] = function() {
    var curWindow = windows.getActiveView();
    if (!curWindow) {
        return
    }
    var pr = curWindow.mdProp
    if(!pr) {
        return
    }
    var extProp = curWindow.mdObj.getExtProp(pr.id);
    
    if (pr.name(1)!="Форма") {
        return
    } else {
	 var pathToForm = SelfScript.fullPath.replace(/js$/, 'ssf')
    	if(!мФормаСкрипта||мФормаСкрипта.Открыта()==false){
        	мФормаСкрипта = loadScriptForm(pathToForm, SelfScript.self) // Обработку событий формы привяжем к самому скрипту
        	мФормаСкрипта.КлючСохраненияПоложенияОкна = SelfScript.uniqueName;
    		мФормаСкрипта.Открыть();
		}
		tree = мФормаСкрипта.ДеревоЭлементовФормы.copy();
        GetControlsList(extProp,tree);
		мФормаСкрипта.ЭлементыФормы.ДеревоЭлементовФормы.Значение = tree;
		РазвернутьУзлы(мФормаСкрипта.ЭлементыФормы.ДеревоЭлементовФормы,мФормаСкрипта.ЭлементыФормы.ДеревоЭлементовФормы.Значение);
    }
}

/* Возвращает название макроса по умолчанию - вызывается, когда пользователь 
дважды щелкает мышью по названию скрипта в окне Снегопата. */
function getDefaultMacros() {
    return 'Открыть окно';
}

////} Макросы

////////////////////////////////////////////////////////////////////////////////////////
////{ StartUp
////
function GetControlsList(extProp,tree) {
    var isManagmendForm = false;
    // Сохраним текущее состояние свойства "Форма" в файл. Так как файл в saveToFile не передан, то
    // сохранение произойдет в псевдо-файл в памяти.
    var file = extProp.saveToFile()
    try{
        // создадим хранилище на базе файла. Для управляемых форм тут вывалится в catch
        var stg = v8Files.attachStorage(file)
        // Получим из хранилища содержимое под-файла form
        var form = extProp.getForm();
		var text = stg.open("form", fomIn).getString(dsUtf8);
        isManagmendForm = false
    }catch(e) {
        isManagmendForm = true;
        file.seek(0, fsBegin)
        var text = file.getString(dsUtf8);
    }
	tree.Rows.Clear();
    if (isManagmendForm) {
        CreateTreeManagmentForm(text, tree); 
    } else {
		//Message("Обычная форма");
        CreateTreeDicForm(form, text, tree)
    }
}

////} StartUp

////////////////////////////////////////////////////////////////////////////////////////
////{ Общего назначения
////

function StringInternalInXml (вхСтрока){

	//{ Получение одной длинной строки
    var выхХМЛТело = вхСтрока.replace(/\n/g, "#%");
    выхХМЛТело = выхХМЛТело.replace(/\r/g, "#%");
    //}

    //{ Заменяем символы, критичные для XML
    // & на "&amp;"
    // < на "&lt;"
    // > на "&gt;"
    выхХМЛТело = выхХМЛТело.replace(/&/g,"&amp;");
    выхХМЛТело = выхХМЛТело.replace(/</g,"&lt;");
    выхХМЛТело = выхХМЛТело.replace(/>/g,"&gt;");
    //}

    //{Решаем проблему с кавычками:
    выхХМЛТело=выхХМЛТело.replace(/\"\"/g,"^$^$");
    выхХМЛТело=выхХМЛТело.replace(/\"/g,"\n^$");
    //}
        
    var ТекстДок=v8New("ТекстовыйДокумент");
    ТекстДок.УстановитьТекст(выхХМЛТело);
    var новХМЛТелоДок=v8New("ТекстовыйДокумент");
    var Максимум=ТекстДок.LineCount();
        
    //Обрабатываем документ построчно:
    var КавычкаОткрыта=true;
        
    for (var y = 1; y<=Максимум; y++){
        КавычкаОткрыта=!КавычкаОткрыта;
        выхСтрока=ТекстДок.ПолучитьСтроку(y);
        if (КавычкаОткрыта){
            
            //{Решаем проблему с получением модуля в управляемой форме
            выхСтрока=выхСтрока.replace(/#%/g,'\r');
            //}
            
			новХМЛТелоДок.ДобавитьСтроку(выхСтрока);

            continue;
        }
            
	    //{ Замена одинарных символов
	    выхСтрока = выхСтрока.replace(/,/g,"</data><data>");
	    выхСтрока = выхСтрока.replace(/{/g,"<elem><data>");
	    выхСтрока = выхСтрока.replace(/}/g,"</data></elem>");
   	    //}
   	    
   	    новХМЛТелоДок.ДобавитьСтроку(выхСтрока);
    }
        
	новХМЛТело=новХМЛТелоДок.ПолучитьТекст();
	//}
	
    //{ Восстановление кавычек
    новХМЛТело=новХМЛТело.replace(/\n\^\$/g,"^$");
    новХМЛТело=новХМЛТело.replace(/\^\$/g,'"');
    новХМЛТело=новХМЛТело.replace(/#%/g,"");
    //}

    //{ Удаление лишних блоков
	новХМЛТело = новХМЛТело.replace(/<data><elem>/g,"<elem>");
    новХМЛТело = новХМЛТело.replace(/<\/elem><\/data>/g,"</elem>");
    //}

    //{ Добавление переносов строк для удобства поиска различий
    новХМЛТело = новХМЛТело.replace(/<\/elem>/g,"</elem>\n");
    новХМЛТело = новХМЛТело.replace(/<\/data>/g,"</data>\n");
    //}
    
    return новХМЛТело;

}

function ПолучитьДокументDOMФормы(МассивФормы) {
	var ЧтениеXML = v8New('ЧтениеXML');
    ЧтениеXML.УстановитьСтроку(МассивФормы);
    var ПостроительDOM = v8New('ПостроительDOM');
    ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML); 
    return ДокументDOM
}

function ИндексКартинкиЭлФормы(Ключ) {
	switch (Ключ) 
		{
		case "Кнопка":
			result = 0;
			break;
		case "Надпись":
			result = 1;
			break;
		case "Поле ввода":
			result = 2;
			break;
		case "Табличное поле":
			result = 3;
			break;
		case "Флажок":
			result = 4;
			break;
		case "Переключатель":
			result = 5;
			break;
		case "Поле списка":
			result = 6;
			break;
		case "Поле выбора":
			result = 7;
			break;
		case "Рамка группы":
			result = 8;
			break;
		case "Поле картинки":
			result = 9;
			break;
		case "Командная панель":
			result = 10;
			break;
		case "Панель":
			result = 11;
			break;
		case "Разделитель":
			result = 12;
			break;
		case "Поле табличного документа":
			result = 13;
			break;
		case "Поле текстового документа":
			result = 14;
			break;
		case "Полоса регулирования":
			result = 15;
			break;
		case "Сводная диаграмма":
			result = 16;
			break;
		case "Индикатор":
			result = 17;
			break;
		case "Календарь":
			result = 18;
			break;
		case "Поле графической схемы":
			result = 19;
			break;
		case "Поле географической схемы":
			result = 20;
			break;
		case "ПолеHTMLДокумента":
			result = 22;
			break;
		case "Диаграмма":
			result = 23;
			break;
		case "Диаграмма Ганта":
			result = 24;
			break;
		case "Дендрограмма":
			result = 25;
			break;
		case "Страница панели":
			result = 26;
			break;
		case "Кнопка командной панели":
			result = 27;
			break;
		case "Форма":
			result = 28;
			break;
		case "Колонка табличного поля":
			result = 30;
			break;
		case "УправляемаяФорма":
			result = 31;
			break;
		case "КоманднаяПанель":
			result = 32;
			break;
		case "77ffcc29-7f2d-4223-b22f-19666e7250ba":
			result = 33;
			break;
		case "cd5394d0-7dda-4b56-8927-93ccbe967a01":
			result = 34;
			break;
		case "a9f3b1ac-f51b-431e-b102-55a69acdecad":
			result = 35;
			break;
		case "3d3cb80c-508b-41fa-8a18-680cdf5f1712":
			result = 36;
			break;
		case "143c00f7-a42d-4cd7-9189-88e4467dc768":
			result = 37;
			break;
		case "КонтекстноеМеню":
			result = 38;
			break;
		default:
			result = 29;
			break;
		}

	return result
}

function РазвернутьУзлы(ТПсДеревом,Узел) {
	
	for (var i=0; i<=Узел.rows.Count()-1 ; i++) {
		СтрокаДляРазворачивания = Узел.rows.Получить(i)
		ТПсДеревом.Развернуть(СтрокаДляРазворачивания)
		РазвернутьУзлы(ТПсДеревом,СтрокаДляРазворачивания);
	}

}

////} Общего назначения

////////////////////////////////////////////////////////////////////////////////////////
////{ ManagmentForm
////
function CreateTreeManagmentForm(text, tree) {
    
    var МассивФормы = StringInternalInXml(text)

	//tree.Колонки.Добавить("ДействияЭлемента");
    //tree.Колонки.Добавить("СвойстваЭлемента");
    
	////таблица событий, назначенных самой управляемой форме
	//var ТаблицаСобытий = v8New("ValueTable");
	//ТаблицаСобытий.Колонки.Добавить("Событие");
	//ТаблицаСобытий.Колонки.Добавить("Действие");
	//ТаблицаСобытий.Колонки.Добавить("ТекстПроцедурыМодуля");
	
    var ДокументDOM=ПолучитьДокументDOMФормы(МассивФормы);
	//добавляем в дерево элементов формы строку самой формы	
	СтрокаФормы = tree.Строки.Добавить();
	СтрокаФормы.ИмяЭлемента = "УправляемаяФорма";
	СтрокаФормы.ТипЭлемента = "УправляемаяФорма";
	СтрокаФормы.КартинкаФормы = ИндексКартинкиЭлФормы("УправляемаяФорма");

	//в управляемой форме команды хранятся отдельно
	//когда будем определять действия для кнопок, будем брать данные из этого соответствия
	//ключ соответствия - уникальный идентификатор команды
	//значение соответствия - структура, где хранится имя команды и действие команды 
    var СоответствиеКоманд=СформироватьСоответствиеКоманд(ДокументDOM);
    
	//ДЗ с элементами формы будем строить рекурсивно спускаясь по дереву XML формы
	//Позиционируемся на узле структуры элементов управляемой формы
	var КорневойУзел = ДокументDOM.ДочерниеУзлы.Item(0).ДочерниеУзлы.Item(1);

	//в 18 элементе указано число - количество заданных особых свойств формы
	//нас эти свойства не интересуют, мы пропускаем указанное количество узлов (*2, потому что узел объявления свойства и узел значения свойства)
	var УзелРазбора = КорневойУзел.ДочерниеУзлы.Item(18);
	var КоличествоПропускаемыхЭлементов = parseInt(УзелРазбора.ТекстовоеСодержимое);
		УзелРазбора = ПропуститьСтроки(КоличествоПропускаемыхЭлементов*2,УзелРазбора);

	////следующий узел будет содержать как раз описание заданных обработчиков событий формы
	////Эти обработчики событий надо добавить в ТЗ
	//if (УзелРазбора.ТекстовоеСодержимое<>"0") {
	//	var КоличествоСобытий=parseInt(УзелРазбора.ПервыйДочерний.ТекстовоеСодержимое);
	//	СтрокаФормы.ДействияЭлемента = ЗаполнитьСобытия(УзелРазбора,КоличествоСобытий,ТаблицаСобытий);
	//} else {
	//	СтрокаФормы.ДействияЭлемента = ТаблицаСобытий; //если событий нет - для формы нужно установить пустую таблицу действий
	//}

	//спускаемся ниже на еще два узла
	УзелРазбора = ПропуститьСтроки(2,УзелРазбора);

	////сохраняем внутреннее представление свойств формы
	//Таблица=СоответствиеСвойствЭлементам.Получить("УправляемаяФорма");
	//ТаблицаСвойств=Таблица.Скопировать();
	//СтрокаФормы.СвойстваЭлемента = ПолучитьВнутреннееПредставление(КорневойУзел,ТаблицаСвойств,0);

	////анализируем наличие командной панели формы
	//Если УзелРазбора.ТекстовоеСодержимое<>"0" Тогда
	//	Если УзелРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое="0" Тогда
	//		ДопИндексКоманднойПанели = 0;
	//	Иначе
	//		ДопИндексКоманднойПанели = 1;
	//	КонецЕсли;
	//	//определяем, содержит ли командная панель кнопки
	//	КоличествоКнопокКоманднойПанели=Число(УзелРазбора.ДочерниеУзлы[21+ДопИндексКоманднойПанели].ТекстовоеСодержимое);
	//	Если КоличествоКнопокКоманднойПанели<>0 Тогда
	//		СтрокаКомПанели=СтрокаФормы.Строки.Добавить();
	//		СтрокаКомПанели.ИмяЭлемента="Командная панель";
	//		СтрокаКомПанели.ТипЭлемента="Командная панель";
	//		СтрокаКомПанели.КартинкаФормы=ИндексКартинкиЭлФормы("КоманднаяПанель");
	//		//сохраняем внутреннее представление свойств командной панели формы
	//		ТаблицаКоманднойПанели=СоответствиеСвойствЭлементам.Получить("КоманднаяПанель");
	//		ТаблицаСвойствКоманднойПанели=ТаблицаКоманднойПанели.Скопировать();
	//		СтрокаКомПанели.СвойстваЭлемента = ПолучитьВнутреннееПредставление(УзелРазбора,ТаблицаСвойствКоманднойПанели,ДопИндексКоманднойПанели);
	//		ЗагрузитьПодчиненные(УзелРазбора, УзелРазбора.ДочерниеУзлы[21+ДопИндексКоманднойПанели],СтрокаКомПанели.Строки,СоответствиеКоманд);
	//	КонецЕсли;
	//КонецЕсли;

	var ТекущийУзел=СтрокаФормы.Строки;
	
	//оставшиеся узлы определяют структуру элементов формы
	ЗагрузитьПодчиненные(КорневойУзел,УзелРазбора.СледующийСоседний,ТекущийУзел,СоответствиеКоманд);
	
	////заполняем закладку реквизитов формы
	//ВывестиДеревоРеквизитовУправляемойФормы(ДокументDOM,Дерево);
	////заполняем закладку параметров формы
	//ВывестиСписокПараметров(ДокументDOM,Дерево);
	
	
}
        
function ЗагрузитьПодчиненные(Узел,УзелРазбора,ТекущийУзел,СоответствиеКоманд) {
		
	//Определяем количество подчиненных элементов
    var КоличествоПодчиненныхЭлементов = parseInt(УзелРазбора.ТекстовоеСодержимое);
    var БазовыйТипЭлемента 			= undefined;
	var ИсследуемыйУзел 			= УзелРазбора;
    for (var i=1; i<=КоличествоПодчиненныхЭлементов*2; i++) {
		
		ИсследуемыйУзел=ИсследуемыйУзел.СледующийСоседний;
		//чередуются узлы объявнения базового типа элемента (с именем узла "data") и узлы с именем узла "elem" c информацией о самом элементе
		if (ИсследуемыйУзел.ИмяУзла=="data") {
            БазовыйТипЭлемента = ИсследуемыйУзел.ТекстовоеСодержимое;
        } else {
			var УзелПользовательскойВидимости = (БазовыйТипЭлемента=="a9f3b1ac-f51b-431e-b102-55a69acdecad")?3:4;
			var ДопИндекс =  (ИсследуемыйУзел.ДочерниеУзлы.Item(УзелПользовательскойВидимости).ТекстовоеСодержимое=="0")?0:1;
			////таблица событий, назначенных обрабатываемому элементу управляемой формы
			//ТаблицаСобытий = Новый ТаблицаЗначений;
			//ТаблицаСобытий.Колонки.Добавить("Событие",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));
			//ТаблицаСобытий.Колонки.Добавить("Действие",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));
			//ТаблицаСобытий.Колонки.Добавить("ТекстПроцедурыМодуля",Новый ОписаниеТипов("Строка"));
		
		    //определяем необходимые параметры - тип элемента и наименование элемента
			if (БазовыйТипЭлемента=="143c00f7-a42d-4cd7-9189-88e4467dc768" || БазовыйТипЭлемента=="a9f3b1ac-f51b-431e-b102-55a69acdecad") {
				ИндексТипаЭлемента = (БазовыйТипЭлемента=="a9f3b1ac-f51b-431e-b102-55a69acdecad") ? ИсследуемыйУзел.Дочерниеузлы.Item(5).ТекстовоеСодержимое:ИсследуемыйУзел.Дочерниеузлы.Item(7).ТекстовоеСодержимое
            } else{
                ИндексТипаЭлемента=ИсследуемыйУзел.Дочерниеузлы.Item(5+ДопИндекс).ТекстовоеСодержимое;
            }
            ТипЭлемента=ОпределитьТипЭлемента(БазовыйТипЭлемента,ИндексТипаЭлемента);
			if (БазовыйТипЭлемента=="143c00f7-a42d-4cd7-9189-88e4467dc768" || БазовыйТипЭлемента=="a9f3b1ac-f51b-431e-b102-55a69acdecad"){
                НаименованиеЭлемента = ИсследуемыйУзел.ДочерниеУзлы.Item(5+ДопИндекс).ТекстовоеСодержимое;
            } else {
                НаименованиеЭлемента = ИсследуемыйУзел.Дочерниеузлы.Item(6+ДопИндекс).ТекстовоеСодержимое;
            }
			
			//вводим новую строку в дерево элементов управляемой формы и заполняем все данные обрабатываемого элемента
			НоваяСтрока = ТекущийУзел.add();
			НоваяСтрока.ИмяЭлемента 	= НаименованиеЭлемента;
			НоваяСтрока.ПолноеИмя 		= НаименованиеЭлемента;
			НоваяСтрока.ТипЭлемента 	= ТипЭлемента;
			НоваяСтрока.КартинкаФормы 	= ИндексКартинкиЭлФормы(БазовыйТипЭлемента);
			
			//ТипЭлементаФормы=СтрЗаменить(ТРег(ТипЭлемента)," ","");
			//Таблица=СоответствиеСвойствЭлементам.Получить(ТипЭлементаФормы);
			//Если Таблица=Неопределено Тогда
			//	ТаблицаСвойств=Новый ТаблицаЗначений;
			//Иначе
			//	ТаблицаСвойств=Таблица.Скопировать();
			//КонецЕсли;
			
			//заполняем события и загружаем подчиненные
			if (БазовыйТипЭлемента=="cd5394d0-7dda-4b56-8927-93ccbe967a01") {
				//добавим события группе (имеет смысл только для группы страниц, когда ИндексТипаЭлемента = "3")
				//Если ИндексТипаЭлемента = "3" Тогда
				//	Если ИсследуемыйУзел.ДочерниеУзлы[20+ДопИндекс].ДочерниеУзлы[2].ТекстовоеСодержимое<>"0" Тогда 
				//		УзелСобытия = ИсследуемыйУзел.ДочерниеУзлы[20+ДопИндекс].ДочерниеУзлы[2].ДочерниеУзлы[1];
				//		СтрокаСобытий 			= ТаблицаСобытий.Добавить();
				//		СобытиеПоИдентификатору = СписокОбработчиковУправляемойФормы.НайтиПоЗначению(УзелСобытия.ТекстовоеСодержимое);
				//		Если СобытиеПоИдентификатору<>Неопределено Тогда
				//			СтрокаСобытий.Событие=СобытиеПоИдентификатору.Представление;
				//		Иначе
				//			СтрокаСобытий.Событие = УзелСобытия.ТекстовоеСодержимое;
				//		КонецЕсли;
				//		СтрокаСобытий.Действие 	= Вычислить(УзелСобытия.СледующийСоседний.ТекстовоеСодержимое);
				//		СтрокаСобытий.ТекстПроцедурыМодуля = ПолучитьТекстПроцедуры(СтрокаСобытий.Действие,ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст());;
				//	КонецЕсли;
				//	НоваяСтрока.ДействияЭлемента = ТаблицаСобытий; //даже если событий нет - для этих элементов нужно установить пустую таблицу действий
				//КонецЕсли;
				//НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				
				//загрузим в дерево подчиненные элементы
				КоличествоПодчиненныхТекущему = parseInt(ИсследуемыйУзел.ДочерниеУзлы.Item(21+ДопИндекс).ТекстовоеСодержимое);
				if (КоличествоПодчиненныхТекущему != 0) {
					var ПодчиненныйУзел = НоваяСтрока.Строки;
					ЗагрузитьПодчиненные(ИсследуемыйУзел,ИсследуемыйУзел.ДочерниеУзлы.Item(21+ДопИндекс),ПодчиненныйУзел,СоответствиеКоманд);
				}
			} 
			if (БазовыйТипЭлемента == "143c00f7-a42d-4cd7-9189-88e4467dc768") {
				//пропускаем ненужные строки
				var УзелДляРазбора  = ИсследуемыйУзел.ДочерниеУзлы.Item(55+ДопИндекс);
				КоличествоСчетчик = parseInt(ИсследуемыйУзел.ДочерниеУзлы.Item(54+ДопИндекс).ТекстовоеСодержимое)*2 - 1;
				if (КоличествоСчетчик != 0) {
					УзелДляРазбора = ПропуститьСтроки(КоличествоСчетчик,УзелДляРазбора);
				}
				
				////добавим события списку
				//Если УзелДляРазбора.ТекстовоеСодержимое <> "0" Тогда
				//	КоличествоСобытий = Число(УзелДляРазбора.ПервыйДочерний.ТекстовоеСодержимое);
				//	НоваяСтрока.ДействияЭлемента = ЗаполнитьСобытия(УзелДляРазбора,КоличествоСобытий,ТаблицаСобытий);
				//Иначе
				//	НоваяСтрока.ДействияЭлемента = ТаблицаСобытий; //если событий нет - для этих элементов нужно установить пустую таблицу действий
				//КонецЕсли;
				
				//пропускаем ненужные строки
				УзелДляРазбора = ПропуститьСтроки(2,УзелДляРазбора);
				
				//НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				////анализируем наличие контекстного меню
				//Если УзелДляРазбора.ТекстовоеСодержимое <> "0" Тогда
				//	Если УзелДляРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое="0" Тогда
				//		ДопИндексКонтекстногоМеню = 0;
				//	Иначе
				//		ДопИндексКонтекстногоМеню = 1;
				//	КонецЕсли;
				//	//определяем, содержит ли контекстное меню пункты
				//	КоличествоПунктовКонтекстногоМеню=Число(УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню].ТекстовоеСодержимое);
				//	Если КоличествоПунктовКонтекстногоМеню <> 0 Тогда
				//		СтрокаКонтекстногоМеню = НоваяСтрока.Строки.Добавить();
				//		СтрокаКонтекстногоМеню.ИмяЭлемента 		= "Контекстное меню";
				//		СтрокаКонтекстногоМеню.ТипЭлемента 		= "Контекстное меню";
				//		СтрокаКонтекстногоМеню.КартинкаФормы 	= ИндексКартинкиЭлФормы("КонтекстноеМеню");
				//		//сохраняем внутреннее представление свойств контекстного меню
				//		ТаблицаКонтекстногоМеню=СоответствиеСвойствЭлементам.Получить("КонтекстноеМеню");
				//		ТаблицаСвойствКонтекстногоМеню=ТаблицаКонтекстногоМеню.Скопировать();
				//		СтрокаКонтекстногоМеню.СвойстваЭлемента = ПолучитьВнутреннееПредставление(УзелДляРазбора,ТаблицаСвойствКонтекстногоМеню,ДопИндексКонтекстногоМеню);
				//		ЗагрузитьПодчиненные(УзелДляРазбора, УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню],СтрокаКонтекстногоМеню.Строки,СоответствиеКоманд);
				//	КонецЕсли;
				//КонецЕсли;
				
				//пропускаем ненужные строки
				УзелДляРазбора = ПропуститьСтроки(1,УзелДляРазбора);
				
				////анализируем наличие командной панели
				//Если УзелДляРазбора.ТекстовоеСодержимое<>"0" Тогда
				//	Если УзелДляРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое="0" Тогда
				//		ДопИндексКоманднойПанели = 0;
				//	Иначе
				//		ДопИндексКоманднойПанели = 1;
				//	КонецЕсли;
				//	//определяем, содержит ли командная панель кнопки
				//	КоличествоКнопокКоманднойПанели=Число(УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКоманднойПанели].ТекстовоеСодержимое);
				//	Если КоличествоКнопокКоманднойПанели<>0 Тогда
				//		СтрокаКоманднойПанели = НоваяСтрока.Строки.Добавить();
				//		СтрокаКоманднойПанели.ИмяЭлемента = "Командная панель";
				//		СтрокаКоманднойПанели.ТипЭлемента = "Командная панель";
				//		СтрокаКоманднойПанели.КартинкаФормы = ИндексКартинкиЭлФормы("КоманднаяПанель");
				//		//сохраняем внутреннее представление свойств командной панели формы
				//		ТаблицаКоманднойПанели=СоответствиеСвойствЭлементам.Получить("КоманднаяПанель");
				//		ТаблицаСвойствКоманднойПанели=ТаблицаКоманднойПанели.Скопировать();
				//		СтрокаКоманднойПанели.СвойстваЭлемента = ПолучитьВнутреннееПредставление(УзелДляРазбора,ТаблицаСвойствКоманднойПанели,ДопИндексКоманднойПанели);
				//		ЗагрузитьПодчиненные(УзелДляРазбора, УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКоманднойПанели],СтрокаКоманднойПанели.Строки,СоответствиеКоманд);
				//	КонецЕсли;
				//КонецЕсли;
				
				//пропускаем ненужные строки
				УзелДляРазбора=УзелДляРазбора.СледующийСоседний;
				//загрузим в дерево подчиненные элементы
				КоличествоПодчиненныхТекущему=parseInt(УзелДляРазбора.ТекстовоеСодержимое);
				if (КоличествоПодчиненныхТекущему!=0) {
					ПодчиненныйУзел = НоваяСтрока.Строки;
					ЗагрузитьПодчиненные(ИсследуемыйУзел,УзелДляРазбора,ПодчиненныйУзел,СоответствиеКоманд);
				}
			}
			if (БазовыйТипЭлемента = "a9f3b1ac-f51b-431e-b102-55a69acdecad") {
				//НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				////заполняем действие кнопки
				//КомандаКнопки= СоответствиеКоманд.Получить(ИсследуемыйУзел.ДочерниеУзлы[8+ДопИндекс].ТекстовоеСодержимое);
				//Если КомандаКнопки<>Неопределено Тогда
				//	СтрокаСобытий 			= ТаблицаСобытий.Добавить();
				//	СтрокаСобытий.Событие 	= КомандаКнопки.ИмяКоманды;
				//	СтрокаСобытий.Действие 	= Вычислить(КомандаКнопки.Действие);
				//	СтрокаСобытий.ТекстПроцедурыМодуля = ПолучитьТекстПроцедуры(СтрокаСобытий.Действие,ЭлементыФормы.ТекстМодуляФормы.ПолучитьТекст());;;
				//КонецЕсли;
				//НоваяСтрока.ДействияЭлемента = ТаблицаСобытий;  //даже если событий нет - для этих элементов нужно установить пустую таблицу действий
			}
			if (БазовыйТипЭлемента="3d3cb80c-508b-41fa-8a18-680cdf5f1712") {
				////находим действия декорации
				//Если ИндексТипаЭлемента="1" Тогда
				//	ИндексУзлаСобытий = 10;
				//Иначе
				//	ИндексУзлаСобытий =5;
				//КонецЕсли;
				//Если ИсследуемыйУзел.ДочерниеУзлы[18+ДопИндекс].ДочерниеУзлы[ИндексУзлаСобытий].ТекстовоеСодержимое<>"0" Тогда
				//	УзелДляРазбора=ИсследуемыйУзел.ДочерниеУзлы[18+ДопИндекс].ДочерниеУзлы[ИндексУзлаСобытий];
				//	КоличествоСобытий=Число(УзелДляРазбора.ПервыйДочерний.ТекстовоеСодержимое);
				//	НоваяСтрока.ДействияЭлемента = ЗаполнитьСобытия(УзелДляРазбора,КоличествоСобытий,ТаблицаСобытий);
				//Иначе
				//	НоваяСтрока.ДействияЭлемента = ТаблицаСобытий;  //если событий нет - для этих элементов нужно установить пустую таблицу действий
				//КонецЕсли;
				//НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				//УзелДляРазбора = ИсследуемыйУзел.ДочерниеУзлы[20+ДопИндекс];
				////анализируем наличие контекстного меню
				//Если УзелДляРазбора.ТекстовоеСодержимое <> "0" Тогда
				//	Если УзелДляРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое="0" Тогда
				//		ДопИндексКонтекстногоМеню = 0;
				//	Иначе
				//		ДопИндексКонтекстногоМеню = 1;
				//	КонецЕсли;
				//	//определяем, содержит ли контекстное меню пункты
				//	КоличествоПунктовКонтекстногоМеню=Число(УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню].ТекстовоеСодержимое);
				//	Если КоличествоПунктовКонтекстногоМеню<>0 Тогда
				//		СтрокаКонтекстногоМеню=НоваяСтрока.Строки.Добавить();
				//		СтрокаКонтекстногоМеню.ИмяЭлемента="Контекстное меню";
				//		СтрокаКонтекстногоМеню.ТипЭлемента="Контекстное меню";
				//		СтрокаКонтекстногоМеню.КартинкаФормы=ИндексКартинкиЭлФормы("КонтекстноеМеню");
				//		ЗагрузитьПодчиненные(УзелДляРазбора, УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню],СтрокаКонтекстногоМеню.Строки,СоответствиеКоманд);
				//	КонецЕсли;
				//КонецЕсли;
			}
			if (БазовыйТипЭлемента="77ffcc29-7f2d-4223-b22f-19666e7250ba") {
				////общие действия для поля
				//Если ИсследуемыйУзел.ДочерниеУзлы[40+ДопИндекс].ТекстовоеСодержимое<>"0" Тогда
				//	УзелДляРазбора=ИсследуемыйУзел.ДочерниеУзлы[40+ДопИндекс];
				//	КоличествоСобытий=Число(УзелДляРазбора.ПервыйДочерний.ТекстовоеСодержимое);
				//	НоваяСтрока.ДействияЭлемента = ЗаполнитьСобытия(УзелДляРазбора,КоличествоСобытий,ТаблицаСобытий);
				//Иначе
				//	НоваяСтрока.ДействияЭлемента = ТаблицаСобытий;  //если событий нет - для этих элементов нужно установить пустую таблицу действий
				//КонецЕсли;
				////дополнительные действия для поля
				//ИндексУзлаСобытий = ОпределитьИндексУзлаСобытий(ИндексТипаЭлемента);
				//Если ИндексУзлаСобытий<>Неопределено И ИсследуемыйУзел.ДочерниеУзлы[39+ДопИндекс].ДочерниеУзлы[ИндексУзлаСобытий].ТекстовоеСодержимое<>"0" Тогда
				//	УзелДляРазбора=ИсследуемыйУзел.ДочерниеУзлы[39+ДопИндекс].ДочерниеУзлы[ИндексУзлаСобытий];
				//	КоличествоСобытий=Число(УзелДляРазбора.ПервыйДочерний.ТекстовоеСодержимое);
				//	НоваяСтрока.ДействияЭлемента = ЗаполнитьСобытия(УзелДляРазбора,КоличествоСобытий,ТаблицаСобытий);
				//КонецЕсли;	
				//НоваяСтрока.СвойстваЭлемента = ПолучитьВнутреннееПредставление(ИсследуемыйУзел,ТаблицаСвойств,ДопИндекс);
				//УзелДляРазбора = ИсследуемыйУзел.ДочерниеУзлы[42+ДопИндекс];
				////анализируем наличие контекстного меню
				//Если УзелДляРазбора.ТекстовоеСодержимое <> "0" Тогда
				//	Если УзелДляРазбора.ДочерниеУзлы[4].ТекстовоеСодержимое="0" Тогда
				//		ДопИндексКонтекстногоМеню = 0;
				//	Иначе
				//		ДопИндексКонтекстногоМеню = 1;
				//	КонецЕсли;
				//	//определяем, содержит ли контекстное меню пункты
				//	КоличествоПунктовКонтекстногоМеню=Число(УзелДляРазбора.ДочерниеУзлы[21+ДопИндексКонтекстногоМеню].ТекстовоеСодержимое);
				//	Если КоличествоПунктовКонтекстногоМеню<>0 Тогда
				//		СтрокаКонтекстногоМеню=НоваяСтрока.Строки.Добавить();
				//		СтрокаКонтекстногоМеню.ИмяЭлемента="Контекстное меню";
				//		СтрокаКонтекстногоМеню.ТипЭлемента="Контекстное меню";
				//		СтрокаКонтекстногоМеню.КартинкаФормы=ИндексКартинкиЭлФормы("КонтекстноеМеню");
				//		ЗагрузитьПодчиненные(УзелДляРазбора, УзелДляРазбора.ДочерниеУзлы[22],СтрокаКонтекстногоМеню.Строки,СоответствиеКоманд);
				//	КонецЕсли;
				//КонецЕсли;
			}
        }

    }
}

function ПропуститьСтроки(КоличествоСчетчик,УзелРазбора) {
	for (var y = 0; y<=КоличествоСчетчик; y++){
		УзелРазбора=УзелРазбора.СледующийСоседний;
	}
	return УзелРазбора
}

function СформироватьСоответствиеКоманд(ДокументDOM) {
    
    var СоответствиеКоманд=v8New('Соответствие');
    var РазыменовательПИ = v8New('РазыменовательПространствИменDOM', ДокументDOM);
    var ИмяЭлемента="/elem[1]/elem[4]/elem/data[3]"; 
    var РезультатXPath=ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.УпорядоченныйИтераторУзлов);
    
    while (true){

        var Узел=РезультатXPath.ПолучитьСледующий();
        
        if (Узел==undefined) 
            break

        var Структура=v8New('Структура',"ИмяКоманды,Действие");
        Структура.Вставить("ИмяКоманды",Узел.РодительскийУзел.ДочерниеУзлы.Item(2).ТекстовоеСодержимое);
        Структура.Вставить("Действие",Узел.ТекстовоеСодержимое);
        СоответствиеКоманд.Вставить(Узел.РодительскийУзел.ДочерниеУзлы.Item(1).ТекстовоеСодержимое,Структура);
    }
    
    return СоответствиеКоманд;
    
}

function ОпределитьТипЭлемента(ТипЭлемента, ИндексТипаЭлемента) {
    var ПолученныйТипЭлемента = "";
    if (ТипЭлемента=="77ffcc29-7f2d-4223-b22f-19666e7250ba") {
        switch (ИндексТипаЭлемента) 
        {
        case "1":
            ПолученныйТипЭлемента="Поле надписи";
            break
        case "2":
            ПолученныйТипЭлемента="Поле ввода";
            break
        case "3" :
            ПолученныйТипЭлемента="Поле флажка";
            break
        case "4":
            ПолученныйТипЭлемента="Поле картинки";
            break
        case "5":
            ПолученныйТипЭлемента="Поле переключателя";
            break
        case "6":
            ПолученныйТипЭлемента="Поле табличного документа";
            break
        case "7":
            ПолученныйТипЭлемента="Поле текстового документа";
            break
		case "8":
			ПолученныйТипЭлемента="Поле календаря";
			break
		case "9":
			ПолученныйТипЭлемента="Поле индикатора";
			break
		case "10":
			ПолученныйТипЭлемента="Поле полосы регулирования";
			break
		case "11":
			ПолученныйТипЭлемента="Поле диаграммы";
			break
		case "12":
			ПолученныйТипЭлемента="Поле диаграммы Ганта";
			break
		case "13":
			ПолученныйТипЭлемента="Поле дендрограммы";
			break
		case "14":
			ПолученныйТипЭлемента="Поле графической схемы";
			break
		case "15":
			ПолученныйТипЭлемента="Поле HTML документа";
			break
		case "16":
			ПолученныйТипЭлемента="Поле географической схемы";
			break
		case "17":
			ПолученныйТипЭлемента="Поле форматированного документа";
			break
        default:
            ПолученныйТипЭлемента= ТипЭлемента+"_"+ИндексТипаЭлемента;
            break;
        }
    }
    if (ТипЭлемента=="cd5394d0-7dda-4b56-8927-93ccbe967a01") {
        switch (ИндексТипаЭлемента) 
            {
            case "0":
                ПолученныйТипЭлемента="Группа командная панель";
                break
            case "1":
                ПолученныйТипЭлемента="Группа подменю";
                break;
            case "2":
                ПолученныйТипЭлемента="Группа колонок";
                break;
            case "3" :
                ПолученныйТипЭлемента="Группа страницы";
                break;
            case "4" :
                ПолученныйТипЭлемента="Группа страница";
                break;
            case "5" :
                ПолученныйТипЭлемента="Обычная группа";
                break;
            case "6" :
                ПолученныйТипЭлемента="Группа кнопок";
                break;
            default:
                ПолученныйТипЭлемента= ТипЭлемента+"_"+ИндексТипаЭлемента;
                break;
            }
    }
    if (ТипЭлемента=="a9f3b1ac-f51b-431e-b102-55a69acdecad") {
        switch (ИндексТипаЭлемента) 
            {
            case "0":
                ПолученныйТипЭлемента = "Кнопка командной панели" ;
                break;
            case "1" :
                ПолученныйТипЭлемента="Кнопка обычная кнопка";
                break
            case "2" :
                ПолученныйТипЭлемента="Кнопка гиперссылка";
                break
            default:
                ПолученныйТипЭлемента= ТипЭлемента+"_"+ИндексТипаЭлемента;
                break
            }
    }
    if (ТипЭлемента=="3d3cb80c-508b-41fa-8a18-680cdf5f1712") {
        switch (ИндексТипаЭлемента) 
            {
            case "0":
                ПолученныйТипЭлемента = "Декорация (надпись)" ;
                break;
            case "1" :
                ПолученныйТипЭлемента = "Декорация (картинка)";
                break;
            default:
                ПолученныйТипЭлемента= ТипЭлемента+"_"+ИндексТипаЭлемента;
                break;
            }
    };
    if (ТипЭлемента=="143c00f7-a42d-4cd7-9189-88e4467dc768") {
      ПолученныйТипЭлемента = "Таблица";
    }

    return ПолученныйТипЭлемента;
}

////} ManagmentForm

////////////////////////////////////////////////////////////////////////////////////////
////{ DicForm
////
function CreateTreeDicForm(form, text, tree) {
	
	var МассивФормы = StringInternalInXml(text)
	var МассивФормыДляАнализа = '<elem><data>"#"</data>' + '\n' +"<data>5c83cba4-7a20-4102-a5be-add0ee74f6a1</data>" +'\n'+МассивФормы+'</elem>';
    var ДокументDOM=ПолучитьДокументDOMФормы(МассивФормыДляАнализа);
	//добавляем в дерево элементов формы строку самой формы	
	var СтрокаФормы = tree.Строки.Добавить();
	СтрокаФормы.ИмяЭлемента = "Форма";
	СтрокаФормы.ТипЭлемента = "Форма";
	СтрокаФормы.КартинкаФормы = ИндексКартинкиЭлФормы("Форма");
	
    var РазыменовательПИ = v8New('РазыменовательПространствИменDOM',ДокументDOM);
	var СтрокаXPath = "/elem[1]/elem[1]/elem[1]/elem[2]/elem[2]/elem/elem[3]/data[2]";
	var РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM,
	РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
	
	ВыстроитьИерархиюЭлементов(РезультатXPath,СтрокаФормы,0);

}

function ВыстроитьИерархиюЭлементов(РезультатXPath,РодительскаяСтрока,ИскатьСтраницу) {
	while (true){
        var Узел=РезультатXPath.ПолучитьСледующий();
        if (Узел==undefined)
            break
			
		var ИмяЭлемента=Узел.ТекстовоеСодержимое;
		var ТипЭлемента=ПолучитьТипЭлемента(Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы.Item(0).ТекстовоеСодержимое); //ТипЗнч(ОбрабатываемаяФорма.ЭлементыФормы[Вычислить(имяЭлемента)]);
		if (ИскатьСтраницу==0) {
			var СтрокаЭлемента = РодительскаяСтрока.Строки.Добавить();
		} else {
			var ИндексУзла = Узел.РодительскийУзел.ПредыдущийСоседний.ДочерниеУзлы.Количество()-5;
			var ИндексСтраницы = parseInt(Узел.РодительскийУзел.ПредыдущийСоседний.ДочерниеУзлы.Item(ИндексУзла).ТекстовоеСодержимое);
			var СтрокаЭлемента = РодительскаяСтрока.Строки.Получить(ИндексСтраницы).Строки.Добавить();	
		}
		СтрокаЭлемента.ИмяЭлемента   = ИмяЭлемента;
		СтрокаЭлемента.ТипЭлемента   = ТипЭлемента;
		СтрокаЭлемента.КартинкаФормы = ИндексКартинкиЭлФормы(ТипЭлемента)
		
		if (ТипЭлемента == "Панель") {
			
			var ЧтениеУзла = v8New('ЧтениеУзловDOM');
			ЧтениеУзла.Открыть(Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы.Item(5));
			var ПостроительDOM = v8New('ПостроительDOM');
			var ДокументDOMУзла = ПостроительDOM.Прочитать(ЧтениеУзла);
			var РазыменовательПИ = v8New('РазыменовательПространствИменDOM',ДокументDOMУзла);
			var СтрокаXPathУзла = "/elem[1]/elem/elem[3]/data[2]";
			var РезультатXPathУзла = ДокументDOMУзла.ВычислитьВыражениеXPath(СтрокаXPathУзла, ДокументDOMУзла,
			РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
		
			var ЧтениеУзлаСтраниц = v8New('ЧтениеУзловDOM');
			ЧтениеУзлаСтраниц.Открыть(Узел.РодительскийУзел.РодительскийУзел.ДочерниеУзлы.Item(2).ДочерниеУзлы.Item(1));
			var ПостроительDOMСтраниц = v8New('ПостроительDOM');
			var ДокументDOMСтраниц = ПостроительDOMСтраниц.Прочитать(ЧтениеУзлаСтраниц);
			var РазыменовательПИСтраниц = v8New('РазыменовательПространствИменDOM',ДокументDOMСтраниц);
			var СтрокаXPathСтраниц = "/elem[1]/elem/elem/data[5]";
			var РезультатXPathСтраниц = ДокументDOMСтраниц.ВычислитьВыражениеXPath(СтрокаXPathСтраниц, ДокументDOMСтраниц,
			РазыменовательПИСтраниц, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
			while (true){
				var УзелСтраниц = РезультатXPathСтраниц.ПолучитьСледующий();
				if (УзелСтраниц==undefined)
            		break
			//
			//	Попытка 
			var проверяемаяСтрока = УзелСтраниц.ТекстовоеСодержимое
			var ДопустимыйСимвол = 	проверяемаяСтрока.substr(0,1);
			if	(ДопустимыйСимвол=='"') {
			//		Если Лев(УзелСтраниц.ТекстовоеСодержимое,1)="""" тогда
						var ИмяСтраницы=УзелСтраниц.ТекстовоеСодержимое;
						var СтрокаСтраницы = СтрокаЭлемента.Строки.Добавить();
						СтрокаСтраницы.ИмяЭлемента = ИмяСтраницы;
						СтрокаСтраницы.ТипЭлемента = "Страница панели";
						СтрокаСтраницы.КартинкаФормы = ИндексКартинкиЭлФормы("Страница панели");
						}
						//ЗаголовокСтраницы=УзелСтраниц.РодительскийУзел.ДочерниеУзлы[1].ДочерниеУзлы[2].ДочерниеУзлы[1].ТекстовоеСодержимое;
						//СоответствиеЗаголовковСтраниц.Вставить(Вычислить(ИмяСтраницы),Вычислить(ЗаголовокСтраницы));
				//	КонецЕсли;
				//Исключение
				//КонецПопытки;
			}
			ВыстроитьИерархиюЭлементов(РезультатXPathУзла,СтрокаЭлемента,1);
		}
		
	}
}

function ПолучитьТипЭлемента(ИдентификаторТипаЭлемента) {
	switch (ИдентификаторТипаЭлемента) 
		{
		case "09ccdc77-ea1a-4a6d-ab1c-3435eada2433":
			result = "Панель";
			break;
		case "984981b1-622d-4ebc-94f7-885f0cdfb59a":
			result = "Дендрограмма";
			break;
		case "e5fdc112-5c84-4a16-9728-72b85692b6e2":
			result = "Диаграмма Ганта";
			break;
		case "6ff79819-710e-4145-97cd-1618da79e3e2":
			result = "Кнопка";
			break;
		case "0fc7e20d-f241-460c-bdf4-5ad88e5474a5":
			result = "Надпись";
			break;
		case "782e569a-79a7-4a4f-a936-b48d013936ec":
			result = "Переключатель";
			break;
		case "d92a805c-98ae-4750-9158-d9ce7cec2f20":
			result = "ПолеHTMLДокумента";
			break;
		case "381ed624-9217-4e63-85db-c4c3cb87daae":
			result = "Поле ввода";
			break;
		case "64483e7f-3833-48e2-8c75-2c31aac49f6e":
			result = "Поле выбора";
			break;
		case "ad37194e-555e-4305-b718-5dca84baf145":
			result = "Поле географической схемы";
			break;
		case "42248403-7748-49da-b782-e4438fd7bff3":
			result = "Поле графической схемы";
			break;
		case "e3c063d8-ef92-41be-9c89-b70290b5368b":
			result = "Календарь";
			break;
		case "151ef23e-6bb2-4681-83d0-35bc2217230c":
			result = "Поле картинки";
			break;
		case "19f8b798-314e-4b4e-8121-905b2a7a03f5":
			result = "Поле списка";
			break;
		case "236a17b3-7f44-46d9-a907-75f9cdc61ab5":
			result = "Поле табличного документа";
			break;
		case "6c06cd5d-8481-4b6f-a90a-7a97a8bb8bef":
			result = "Полоса регулирования";
			break;
		case "ea83fe3a-ac3c-4cce-8045-3dddf35b28b1":
			result = "Табличное поле";
			break;
		case "35af3d93-d7c7-4a2e-a8eb-bac87a1a3f26":
			result = "Флажок";
			break;
		case "a8b97779-1a4b-4059-b09c-807f86d2a461":
			result = "Диаграмма";
			break;
		case "b1db1f86-abbb-4cf0-8852-fe6ae21650c2":
			result = "Индикатор";
			break;
		case "e69bf21d-97b2-4f37-86db-675aea9ec2cb":
			result = "Командная панель";
			break;
		case "14c4a229-bfc3-42fe-9ce1-2da049fd0109":
			result = "Поле текстового документа";
			break;
		case "36e52348-5d60-4770-8e89-a16ed50a2006":
			result = "Разделитель";
			break;
		case "90db814a-c75f-4b54-bc96-df62e554d67d":
			result = "Рамка группы";
			break;
		case "a26da99e-184a-4823-b0d6-62816d38dc4e":
			result = "Сводная диаграмма";
			break;
		default:
			result = ИдентификаторТипаЭлемента;
			break;
		}

	return result
}

////} DicForm
