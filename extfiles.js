$engine JScript
$uname extfiles
$dname Внешние файлы
$addin global
$addin stdcommands
$addin stdlib

/* Скрипт для открытия внешних файлов для Снегопата
 * Автор        : Пушин Владимир, vladnet@gmail.com
 * Дата создания: 24.08.2011
 * Описание     : Добавляет окно из которого можно открывать внешние файлы
 */
var мВерсияСкрипта = 1.40

////////////////////////////////////////////////////////////////////////////////////////
////{ Макросы
////

// Макрос для вызова окна
function macrosОткрытьОкноВнешнихФайлов() {

    var pathToForm = SelfScript.fullPath.replace(/js$/, 'ssf')
    if(!мФормаСкрипта){
        мФормаСкрипта = loadScriptForm(pathToForm, SelfScript.self) // Обработку событий формы привяжем к самому скрипту
        мФормаСкрипта.Заголовок="Внешние файлы" //+мВерсияСкрипта        
        КэшКартинокТиповФайлов = ПолучитьКэшКартинокТиповФайлов(мФормаСкрипта);
    }
    мФормаСкрипта.Открыть()
}

function macrosСвернутьДеревоВнешнихФайлов() {

    if(мАктивноДеревоВнешнихФайлов()==false) return false
    
    if(мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.Развернут(мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока)==false)
    {
        if(мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока.Родитель != undefined)
            мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока=мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока.Родитель
    }
    else
        мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.Свернуть(мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока)
}

function macrosРазвернутьДеревоВнешнихФайлов() {

    if(мАктивноДеревоВнешнихФайлов()==false) return false
    мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.Развернуть(мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока)
}

////} Макросы

////////////////////////////////////////////////////////////////////////////////////////
////{ ФормаСкрипта - обработчики событий.
////

function КпШапкаОбновить(Элемент) {
    мОбновитьФайлы()
}

function КпШапкаОбновитьТекущуюВетку(Элемент) {
    мОбновитьФайлыТекущейВетки()
}

function ФильтрПриИзменении(Элемент) {
    мОбновитьФайлы()
}

function ПриОткрытии() {
    мОбновитьФайлы()
}

function КпШапкаЗакрыть(Элемент) {
    мФормаСкрипта.Закрыть()
}

function мАктивноДеревоВнешнихФайлов() {
    if(мФормаСкрипта==null) return false
    if(мФормаСкрипта.ВводДоступен()!=true) return false
    return мФормаСкрипта.ТекущийЭлемент==мФормаСкрипта.ЭлементыФормы.ДеревоФайлов
}

function КпШапкаРазвернуть(Элемент) {
    macrosРазвернутьДеревоВнешнихФайлов();
}

function КпШапкаСправка(Кнопка) {
    RunApp('http://snegopat.ru/scripts/wiki?name=extfiles.js');
}

function КпШапкаСвернуть(Элемент) {
    macrosСвернутьДеревоВнешнихФайлов()
}

function ДеревоФайловПередНачаломИзменения(пЭлемент, пОтказ) {

    пОтказ.val = true
    лТекСтрока=пЭлемент.val.ТекущаяСтрока
    if(лТекСтрока.ЭтоКаталог) return
    
    if (МожноОткрытьФайлВКонфигураторе(лТекСтрока.ИмяФайла))
        stdlib.openFileIn1C(лТекСтрока.ИмяФайла)
    else 
        ЗапуститьПриложение(лТекСтрока.ИмяФайла);
}

function ДеревоФайловПриВыводеСтроки(пЭлемент, пОформлениеСтроки, пДанныеСтроки) {

    лЯчейкаИмя=пОформлениеСтроки.val.Ячейки.Имя
    лЯчейкаИмя.ОтображатьКартинку=true
    if(ValueIsFilled(пДанныеСтроки.val.Родитель)==false)
    {
        лЯчейкаИмя.Картинка = мФормаСкрипта.ЭлементыФормы.КартинкаПапка.Картинка;
    }
    else if(пДанныеСтроки.val.ЭтоКаталог==true)
    {
        лЯчейкаИмя.Картинка = мФормаСкрипта.ЭлементыФормы.КартинкаПапка.Картинка;
    }
    else
    {
        var КартинкаПоРасширению = ПолучитьКартинкуПоРасширению(пДанныеСтроки.val.Тип);
        лЯчейкаИмя.Картинка = КартинкаПоРасширению ? КартинкаПоРасширению : БиблиотекаКартинок.Форма;
    }
        
}

function КонтекстноеМенюОткрытьПроводник (Кнопка) {
    var ТекущаяСтрока = мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущиеДанные;
    if (ТекущаяСтрока) 
    {
        var СтрокаЗапуска = 'explorer.exe "' + ПолучитьКаталогСтрокиДерева(ТекущаяСтрока) + '"';
        ЗапуститьПриложение(СтрокаЗапуска);
    }
}

function КонтекстноеМенюОткрытьКонсоль (Кнопка) {
    var ТекущаяСтрока = мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущиеДанные;
    if (ТекущаяСтрока) 
    {
        var Каталог = ПолучитьКаталогСтрокиДерева(ТекущаяСтрока);
        var СтрокаЗапуска = ПолучитьКомандуЗапускаКонсоли(Каталог);
        ЗапуститьПриложение(СтрокаЗапуска, Каталог);
    }
}

////
////} ФормаСкрипта - обработчики событий.
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
////{ Вспомогательные процедуры и функции.
////

function ТзКаталоговИнициализировать(пТзКаталоги) {

    try{
        пТзКаталоги = ValueFromStringInternal(пТзКаталоги)
    }
    catch(e){
        пТзКаталоги = v8New("ТаблицаЗначений")
    }
    try{ /*тут проверяем не старые ли настройки, раньше хранились в массиве, конвертируем, в будущем удалить*/
        var лТест=пТзКаталоги.ВГраница()
        лТзКаталоги = v8New("ТаблицаЗначений")
        лТзКаталоги.Колонки.Добавить("ИмяКаталога");
        лТзКаталоги.Колонки.Добавить("Развернуть");
        
        for (var лИнд=0; лИнд<пТзКаталоги.Количество(); лИнд++)
        {
            лСтрокаТз=лТзКаталоги.Добавить()
            лСтрокаТз.ИмяКаталога=пТзКаталоги.Получить(лИнд)
            лСтрокаТз.Развернуть=true
        }
        return лТзКаталоги
    }
    catch(e){
    }
    return пТзКаталоги
}

function GetAbsolutePathName(pathToFile) {

    if (pathToFile.length == 0) return pathToFile
    //код взят из python для определеня abspath
    debugger; 
    backslash = "\\"
    if (pathToFile.substr(0,4)=='\\\\.\\' ||  pathToFile.substr(0,4)=='\\\\?\\') return pathToFile
    
    path = pathToFile.replace("/", "\\")
    prefix = ''
    if (path.substr(1,1) == ":") {
        prefix = path.substr(0,2)
        path = path.substr(2)
    }
    if (prefix == '') {
        while (path.substr(0,1) == "\\"){
            prefix = prefix + backslash
            path = path.substr(1)
        }
    }
    else {
        if (path.substr(0,1)=="\\") {
            prefix = prefix + backslash
            while (path.substr(0,1) == "\\"){
                path = path.substr(1)
            }
        }
    }
    comps = path.split("\\")
    i = 0
    while (i < comps.length){
        if (comps[i]=="." || comps[i]=="") {
            var sl1 = comps.slice(0,i)
            var sl2 = comps.slice(i+1)
            comps = sl1.concat(sl2)
            continue;
        } else {
            if (comps[i] == "..") {
                if (i > 0 && comps[i-1] != "..") {
                var sl1 = comps.slice(0,i-1)
                var sl2 = comps.slice(i+1)
                comps = sl1.concat(sl2)
                i -= 1;
                continue;
                } else {
                if (i==0 && prefix.substr(prefix.length -1, 1) == "\\") {
                    var sl1 = comps.slice(0,i)
                    var sl2 = comps.slice(i+1)
                    comps = sl1.concat(sl2)
                    continue;
                } else {
                    i +=1
                    continue4
                }
                continue;
            }
            continue;
            }
            i += 1;
        } 
    }
    if (comps.length == 0) comps.push('.')
    return prefix + comps.join(backslash)
}

function buildPath (a, b) {
    if (a == "") return b

    var is_a_drive = a.substr(1,1) == ":" ? true:false
    var is_b_drive = b.substr(1,1) == ":" ? true:false
    if (is_b_drive == true) return b
    var path = a;
    if (path.substr(path.length-1,1) == "\\" && b.substr(0,1) == "\\") {
        return path+b.substr(1)
    }
    if (path.substr(path.length-1,1) == "\\" && b.substr(0,1) != "\\") {
        return path+b;
    }
    if (path.substr(path.length-1,1) != "\\" && b.substr(0,1) != "\\") {
        return path+"\\"+b
    }
    if (path.substr(path.length-1,1) != "\\" && b.substr(0,1) == "\\") {
        return path+b;
    }
}

function мДобавитьФайлы(пПуть, пУзел) {

    var лФайлы=FindFiles(пПуть, '*.*', false)
    for (var лИнд=0; лИнд<лФайлы.Количество(); лИнд++)
    {
        лФайл=лФайлы.Получить(лИнд)
        
        if((лФайл.ЭтоКаталог() == false) && (мФормаСкрипта.Фильтр != ''))
            if(лФайл.ИмяБезРасширения.toLowerCase().search(мФормаСкрипта.Фильтр.toLowerCase()) == -1) continue
        
        лСтрокаДереваФайлов=пУзел.Строки.Добавить()
        лСтрокаДереваФайлов.ЭтоКаталог=лФайл.ЭтоКаталог()
        лСтрокаДереваФайлов.ИмяФайла=лФайл.ПолноеИмя
        лСтрокаДереваФайлов.ДатаИзменения=лФайл.ПолучитьВремяИзменения()
        
        if(мОтображатьРасширениеФайлаВПредставлении == true)
            лСтрокаДереваФайлов.Имя=лФайл.Имя
        else
            лСтрокаДереваФайлов.Имя=лФайл.ИмяБезРасширения
        
        if(лСтрокаДереваФайлов.ЭтоКаталог == true)
        {
            if(ValueIsFilled(лФайл.Расширение)) лСтрокаДереваФайлов.Имя+=лФайл.Расширение
            мДобавитьФайлы(лФайл.ПолноеИмя, лСтрокаДереваФайлов)
        }
        else
            лСтрокаДереваФайлов.Тип=лФайл.Расширение.substr(1)
    }
}

function ДобавитьКаталоги(пТзКаталоги) {

    var mainFolder = profileRoot.getValue("Snegopat/MainFolder")
    try {
        var fso = new ActiveXObject ("Scripting.FileSystemObject")
    }
    catch (er) {
        var fso = null
    }
    for (var лИнд=0; лИнд<пТзКаталоги.Количество(); лИнд++)
    {
        var лКаталог=пТзКаталоги.Получить(лИнд).ИмяКаталога;
        //Добавим возможность формирования пути каталога, относительно Снегопата. 
        // путь начинаться должен с "..", по просбе 
        if (лКаталог.substr(0,2) == "..") {
            if (fso == null) {
                var млКаталог = GetAbsolutePathName(buildPath(mainFolder, лКаталог))
            } else {
                var млКаталог = fso.GetAbsolutePathName(fso.buildPath(mainFolder, лКаталог))    
            }
            //Сделаем проверку существования каталога от 1С.
            var f = v8New("File", млКаталог); 
            if (f.Exist()) {
                лКаталог = млКаталог;
            } else {
                Message("Каталог отностельно Снегопата не существует, пропускаем " + млКаталог);
                continue; //
            }
        }
        лСтрокаДереваФайлов=мФормаСкрипта.ДеревоФайлов.Строки.Добавить()
        лСтрокаДереваФайлов.Имя=лКаталог
        лСтрокаДереваФайлов.ИмяФайла=лКаталог
        лСтрокаДереваФайлов.Развернуть=пТзКаталоги.Получить(лИнд).Развернуть
        
        мДобавитьФайлы(лКаталог, лСтрокаДереваФайлов)
        лСтрокаДереваФайлов.Строки.Сортировать("ЭтоКаталог Убыв, Имя", true)
    }
    мФормаСкрипта.ДеревоФайлов.Строки.Сортировать("ЭтоКаталог Убыв, Имя", true)
}

function мОбновитьФайлы() {
    лТекСтрока=мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока
    
    // Запомним текущую строку
    лИмяФайлаТекСтроки=""
    if(лТекСтрока!=undefined) лИмяФайлаТекСтроки=лТекСтрока.ИмяФайла
    
    мФормаСкрипта.ДеревоФайлов.Строки.Очистить()
    
    ДобавитьКаталоги(мТзКаталогиОбщие)
    ДобавитьКаталоги(мТзКаталогиБазы)
    for (var лИнд=0; лИнд<мФормаСкрипта.ДеревоФайлов.Строки.Количество(); лИнд++)
    {
        if(мФормаСкрипта.ДеревоФайлов.Строки.Получить(лИнд).Развернуть == false) continue
        var Str1=мФормаСкрипта.ДеревоФайлов.Строки.Получить(лИнд)
        мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.Развернуть(Str1, мФормаСкрипта.Фильтр != '');
    }
    
    // Восстановим текущую строку
    if(лИмяФайлаТекСтроки != ""){
        лСтрокаНайденная=мФормаСкрипта.ДеревоФайлов.Строки.Найти(лИмяФайлаТекСтроки, "ИмяФайла", true)
        if(лСтрокаНайденная != undefined)
            мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока=лСтрокаНайденная
    }
}

function мОбновитьФайлыТекущейВетки() {

    лТекСтрока=мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока
    if(лТекСтрока==undefined) return
    
    // Запомним текущую строку
    лИмяФайлаТекСтроки=лТекСтрока.ИмяФайла
    
    while(лТекСтрока.Родитель != undefined) лТекСтрока=лТекСтрока.Родитель
    лТекСтрока.Строки.Очистить()
    мДобавитьФайлы(лТекСтрока.Имя, лТекСтрока)
    лТекСтрока.Строки.Сортировать("ЭтоКаталог Убыв, Имя", true)
    
    // Восстановим текущую строку
    лСтрокаНайденная=мФормаСкрипта.ДеревоФайлов.Строки.Найти(лИмяФайлаТекСтроки, "ИмяФайла", true)
    if(лСтрокаНайденная != undefined)
        мФормаСкрипта.ЭлементыФормы.ДеревоФайлов.ТекущаяСтрока=лСтрокаНайденная
}

function ПолучитьКаталогСтрокиДерева(СтрокаДерева) {
    var Файл = v8New('Файл', СтрокаДерева.ИмяФайла);
    return Файл.ЭтоФайл() ? Файл.Путь : Файл.ПолноеИмя;
}

function ПолучитьКомандуЗапускаКонсоли(Каталог) {
    return мКомандаЗапускаКонсоли.replace(/%1/, Каталог);
}

function СформироватьТзРасширенияФайловПоУмолчанию() {

    var ТЗ = v8New("ТаблицаЗначений");
    ТЗ.Колонки.Добавить("Расширение");

    function Расш(расширение) { ТЗ.Добавить().Расширение = расширение; }
    
    // Стандартные файлы 1С:Предприятия 8.
    Расш("txt"); Расш("bmp"); Расш("dib"); Расш("png"); Расш("rle"); 
    Расш("jpg"); Расш("jpeg"); Расш("tif"); Расш("ico"); Расш("mxl"); 
    Расш("epf"); Расш("erf"); Расш("htm"); Расш("html"); Расш("grs"); 
    Расш("geo"); Расш("st"); Расш("lgf"); Расш("elf"); Расш("cf"); Расш("pff");

    // Файлы Снегопата.
    Расш("ssf"); Расш("js"); Расш("vbs");
    
    return ТЗ;
}

function МожноОткрытьФайлВКонфигураторе(ИмяФайла)  {
    if (!RE_EXTENSIONS) 
    {
        var ext = new Array();
        for (var i=0; i<мТзРасширенияФайлов.Количество(); i++)
            ext.push(мТзРасширенияФайлов.Get(i).Расширение);
            
        RE_EXTENSIONS = new RegExp('\.(?:' + ext.join('|') + ')$', 'i');
    }
    
    return RE_EXTENSIONS.test(ИмяФайла);
}

function ПолучитьКэшКартинокТиповФайлов(ФормаСкрипта) {
    var ЭФ = ФормаСкрипта.ЭлементыФормы;  
    var cache = {};
  
    function add(estr, pic) {
        var exts = estr.split('|');
        for (var i=0; i<exts.length; i++)
            cache[exts[i].toLowerCase()] = pic; 
    }
  
    add('doc|docx|dot|odf', ЭФ.КартинкаТипФайлаDoc.Картинка);
    add('xls|xlsx|csv', ЭФ.КартинкаТипФайлаXls.Картинка);
    
    add('pps|ppsx', ЭФ.КартинкаТипФайлаPps.Картинка);
    add('pdf|ps', ЭФ.КартинкаТипФайлаPdf.Картинка);
        
    add('png|jpg|jpeg|bmp|tif|dib|ico', ЭФ.КартинкаТипФайлаPng.Картинка);

    add('xml', ЭФ.КартинкаТипФайлаXml.Картинка);
    add('zip', ЭФ.КартинкаТипФайлаZip.Картинка);
    add('rar', ЭФ.КартинкаТипФайлаRar.Картинка);
    
    add('exe|cmd|bat', ЭФ.КартинкаТипФайлаExe.Картинка);

    add('txt', ЭФ.КартинкаТипФайлаTxt.Картинка);    
    add('geo', ЭФ.КартинкаТипФайлаGeo.Картинка);
    add('grs', ЭФ.КартинкаТипФайлаGrs.Картинка);
    add('erf', ЭФ.КартинкаТипФайлаErf.Картинка);
    add('epf', ЭФ.КартинкаТипФайлаEpf.Картинка);
    add('mxl', ЭФ.КартинкаТипФайлаMxl.Картинка);
    
    add('ssf', ЭФ.КартинкаТипФайлаSsf.Картинка);
    add('js', ЭФ.КартинкаТипФайлаTxt.Картинка);
    add('vbs', ЭФ.КартинкаТипФайлаTxt.Картинка);
    
    add('unknown', ЭФ.КартинкаТипФайлаUnknown.Картинка);

    return cache;

}

function ПолучитьКартинкуПоРасширению(Расширение) {

    if (КэшКартинокТиповФайлов) {
        var pic = КэшКартинокТиповФайлов[Расширение.toLowerCase()];
        return pic ? pic : КэшКартинокТиповФайлов['unknown'];
    }    
    return null;
}

////
////} Вспомогательные процедуры и функции.
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
////{ ФормаНастройки - обработчики событий.
////

function КпШапкаНастройки(Элемент) {
    var pathToForm=SelfScript.fullPath.replace(/.js$/, 'param.ssf')
    мФормаНастройки=loadScriptForm(pathToForm, SelfScript.self) // Обработку событий формы привяжем к самому скрипту
    мФормаНастройки.ЭлементыФормы.НадписьВерсия.Заголовок="Версия скрипта:"+мВерсияСкрипта
    мФормаНастройки.ОткрытьМодально()
}

function мЗаписатьНастройки() {

    мТзКаталогиОбщие=мФормаНастройки.КаталогиОбщие
    мТзКаталогиБазы=мФормаНастройки.КаталогиБазы
    мОткрыватьПриСтарте=мФормаНастройки.ОткрыватьФормуПриЗагрузке
    мТзРасширенияФайлов = мФормаНастройки.РасширенияФайлов.Скопировать();
    мКомандаЗапускаКонсоли = мФормаНастройки.КомандаЗапускаКонсоли;
    RE_EXTENSIONS = null; // Регулярку надо переформировать.
    
    profileRoot.setValue(pflExtFilesOpenOnStart, мОткрыватьПриСтарте)
    profileRoot.setValue(pflExtShowExtInName, мОтображатьРасширениеФайлаВПредставлении)
    profileRoot.setValue(pflExtFilesOpenOnStart, мОткрыватьПриСтарте)
    profileRoot.setValue(pflExtFilesPath, ValueToStringInternal(мТзКаталогиОбщие))
    profileRoot.setValue(pflExtFilesPathBase, ValueToStringInternal(мТзКаталогиБазы))
    profileRoot.setValue(pflExtOpen1CExtensions, мТзРасширенияФайлов)
    profileRoot.setValue(pflExtRunConsoleCommand, мКомандаЗапускаКонсоли)
    
    мОбновитьФайлы()
}

function мЗагрузитьНастройку(пТзКаталоги, пТаблицаКаталогов) {

    for (var лИнд=0; лИнд<пТзКаталоги.Количество(); лИнд++)
    {
        лСтрокаТз=пТаблицаКаталогов.Добавить()
        лСтрокаТз.ИмяКаталога=пТзКаталоги.Получить(лИнд).ИмяКаталога
        лСтрокаТз.Развернуть=пТзКаталоги.Получить(лИнд).Развернуть
    }
}

function НастройкиПриОткрытии() {
    мФормаНастройки.ОткрыватьФормуПриЗагрузке=мОткрыватьПриСтарте
    мФормаНастройки.ОтображатьРасширениеФайлаВПредставлении=мОтображатьРасширениеФайлаВПредставлении
    мЗагрузитьНастройку(мТзКаталогиОбщие, мФормаНастройки.КаталогиОбщие);
    мЗагрузитьНастройку(мТзКаталогиБазы, мФормаНастройки.КаталогиБазы);
    мФормаНастройки.РасширенияФайлов = мТзРасширенияФайлов;
    мФормаНастройки.КомандаЗапускаКонсоли = мКомандаЗапускаКонсоли;
}

function КпШапкаЗаписатьИЗакрыть(Кнопка) {
    мЗаписатьНастройки()
    мФормаНастройки.Закрыть()
}

function КпШапкаЗаписать(Кнопка) {
    мЗаписатьНастройки()
}

/* Возвращает название макроса по умолчанию - вызывается, когда пользователь 
дважды щелкает мышью по названию скрипта в окне Снегопата. */
function getDefaultMacros() {
    return 'ОткрытьОкноВнешнихФайлов';
}

function мВыбратьКаталог() {
    ДиалогОткрытияФайла=v8New("ДиалогВыбораФайла", РежимДиалогаВыбораФайла.ВыборКаталога)
    ДиалогОткрытияФайла.ПолноеИмяФайла = ""
    ДиалогОткрытияФайла.Заголовок = "Выберите каталог"
    if(ДиалогОткрытияФайла.Выбрать()==false) return ""
    return ДиалогОткрытияФайла.Каталог
}

function КаталогиОбщиеИмяКаталогаНачалоВыбора(Элемент, СтандартнаяОбработка) {
    лКаталог=мВыбратьКаталог()
    if(лКаталог=="") return
    Элемент.val.Значение=лКаталог
}

function КаталогиБазыИмяКаталогаНачалоВыбора(Элемент, СтандартнаяОбработка) {
    лКаталог=мВыбратьКаталог()
    if(лКаталог=="") return
    Элемент.val.Значение=лКаталог
}

function НадписьCmdExeНажатие (Элемент) {
	мФормаНастройки.КомандаЗапускаКонсоли = Элемент.val.Заголовок;
}

function НадписьFarExeНажатие (Элемент) {
	мФормаНастройки.КомандаЗапускаКонсоли = Элемент.val.Заголовок;
}

////
////} ФормаНастройки - обработчики событий.
////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
////{ Инициализация скрипта
////

// Зададим путь в профайле
var pflExtFilesOpenOnStart  = "ExtFiles/OpenOnStart"
var pflExtShowExtInName     = "ExtFiles/ShowExtInName"
var pflExtFilesPath         = "ExtFiles/Path"
var pflExtFilesPathBase     = "ExtFiles/PathBase"
var pflExtOpen1CExtensions  = "ExtFiles/Open1CExtensions"
var pflExtRunConsoleCommand = "ExtFiles/RunConsoleCommand"

// Восстановим настройки
profileRoot.createValue(pflExtFilesOpenOnStart, false, pflSnegopat)
profileRoot.createValue(pflExtShowExtInName, true, pflSnegopat)
profileRoot.createValue(pflExtFilesPath, false, pflSnegopat)
profileRoot.createValue(pflExtFilesPathBase, false, pflBase)
profileRoot.createValue(pflExtOpen1CExtensions, СформироватьТзРасширенияФайловПоУмолчанию(), pflSnegopat)
profileRoot.createValue(pflExtRunConsoleCommand, 'cmd.exe /K cd /D "%1"', pflSnegopat)


var мОткрыватьПриСтарте = profileRoot.getValue(pflExtFilesOpenOnStart)
var мОтображатьРасширениеФайлаВПредставлении = profileRoot.getValue(pflExtShowExtInName)
var мТзКаталогиОбщие = profileRoot.getValue(pflExtFilesPath)
var мТзКаталогиБазы = profileRoot.getValue(pflExtFilesPathBase)
var мТзРасширенияФайлов = profileRoot.getValue(pflExtOpen1CExtensions);
var мКомандаЗапускаКонсоли = profileRoot.getValue(pflExtRunConsoleCommand);

var RE_EXTENSIONS = null;

var КэшКартинокТиповФайлов = {};

global.connectGlobals(SelfScript)

мТзКаталогиОбщие = ТзКаталоговИнициализировать(мТзКаталогиОбщие)
мТзКаталогиБазы = ТзКаталоговИнициализировать(мТзКаталогиБазы)

мФормаСкрипта=null
мФормаНастройки=null

if(мОткрыватьПриСтарте==true)
    macrosОткрытьОкноВнешнихФайлов()

////} Инициализация скрипта


